#![no_std]
#![no_main]

use core::panic::PanicInfo;
#[cfg(not(test))]
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}

const VGA_BUFFER: *mut u8 = 0xb8000 as *mut u8;
const VGA_COLOR: u8 = 0x0F; // Color
static mut CURRENT_COL: usize = 0;
static mut CURRENT_ROW: usize = 0;

unsafe fn write_byte(byte: u8, color: u8) {
    if byte == b'\n' {
        CURRENT_COL = 0;
        CURRENT_ROW += 1;
        return;
    }

    let offset = (CURRENT_ROW * 80 + CURRENT_COL) as usize;
    *VGA_BUFFER.offset(offset as isize * 2) = byte;
    *VGA_BUFFER.offset(offset as isize * 2 + 1) = color;

    CURRENT_COL += 1;
}

unsafe fn write_string(s: &str, color: u8) {
    for byte in s.bytes() {
        match byte {
            0x20..=0x7e | b'\n' => write_byte(byte, color),
            _ => write_byte(0xfe, color),
        }
    }
}

unsafe fn write_line(s: &str, color: u8) {
    write_string(s, color);
    CURRENT_COL = 0;
    CURRENT_ROW += 1;
}

unsafe fn clear_screen() {
    for i in 0..80 * 25 {
        *VGA_BUFFER.offset(i as isize * 2) = b' ';
        *VGA_BUFFER.offset(i as isize * 2 + 1) = VGA_COLOR;
    }
    CURRENT_COL = 0;
    CURRENT_ROW = 0;
}

unsafe fn wait() {
    for _ in 0..10_000_000 {
        core::hint::spin_loop();
    }
}

#[no_mangle]
pub extern "C" fn _start() -> ! {
    unsafe {
        write_line("Hello, Mini OS!", VGA_COLOR);
    }
    loop {}
}
